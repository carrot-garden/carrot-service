########################################################################
#
#	${serviceStamp}
#

#********************************************************************
# Include file problems can be debugged by removing the first '#'
#  from the following line:
#include.debug

#********************************************************************
#	http://wrapper.tanukisoftware.org/doc/english/prop-ignore-sequence-gaps.html
#	Controls whether or not the Wrapper should allow gaps in sequences of properties
#	DO NOT CHANGE
wrapper.ignore_sequence_gaps=true

#********************************************************************
# Wrapper Java Properties
#********************************************************************
#

#********************************************************************
#	http://wrapper.tanukisoftware.org/doc/english/prop-java-command-loglevel.html
#	Tell the Wrapper to log the full generated Java command line.
wrapper.java.command.loglevel=INFO

# NOTE: the command will be constructed in the following order:
# 	command classpath.N library.path.N initmemory maxmemory additional.N mainclass parameter.N

# http://wrapper.tanukisoftware.org/doc/english/prop-java-command.html
#	Java Application itself
wrapper.java.command=${javaCommand}

# http://wrapper.tanukisoftware.org/doc/english/prop-java-classpath-n.html
#	Java Classpath (must include wrapper.jar)
#	Add class path elements as needed starting from 1
#
# 	contract: expecting everything ONLY in these locations
#	current directory is defined by the running wrapper binary location
wrapper.java.classpath.1=./conf
wrapper.java.classpath.2=./lib/*.jar

# http://wrapper.tanukisoftware.org/doc/english/prop-java-library-path-n.html
# 	Java Library Path (location of native libraries such as wrapper.dll or libwrapper.so)
#	must place here wrapper own native library
wrapper.java.library.path.1=./bin
wrapper.java.library.path.2=./lib

# http://wrapper.tanukisoftware.org/doc/english/prop-java-library-path-append-system-path.html
# 	this property will cause the Wrapper to append the contents of the system PATH or LD_LIBRARY_PATH
# 	to the java library path used to launch the JVM
wrapper.java.library.path.append_system_path=true

# http://wrapper.tanukisoftware.org/doc/english/prop-java-initmemory.html
# 	Initial Java Heap Size (in MB) used by JVM
#	USE INSTEAD -> wrapper.memory.properties
#wrapper.java.initmemory=${initMemory}

# http://wrapper.tanukisoftware.org/doc/english/prop-java-maxmemory.html
# 	Maximum Java Heap Size (in MB)  used by JVM
#	USE INSTEAD -> wrapper.memory.properties
#wrapper.java.maxmemory=${maxiMemory}

# http://wrapper.tanukisoftware.org/doc/english/prop-java-additional-n.html
#	Additional Parameters to the Java JVM
wrapper.java.additional.100=${javaParameter0}
wrapper.java.additional.101=${javaParameter1}
wrapper.java.additional.102=${javaParameter2}
wrapper.java.additional.103=${javaParameter3}
wrapper.java.additional.104=${javaParameter4}
wrapper.java.additional.105=${javaParameter5}
wrapper.java.additional.106=${javaParameter6}
wrapper.java.additional.107=${javaParameter7}
wrapper.java.additional.108=${javaParameter8}
wrapper.java.additional.109=${javaParameter9}
wrapper.java.additional.110=${javaParameter10}
wrapper.java.additional.111=${javaParameter11}
wrapper.java.additional.112=${javaParameter12}
wrapper.java.additional.113=${javaParameter13}
wrapper.java.additional.114=${javaParameter14}
wrapper.java.additional.115=${javaParameter15}
wrapper.java.additional.116=${javaParameter16}
wrapper.java.additional.117=${javaParameter17}
wrapper.java.additional.118=${javaParameter18}
wrapper.java.additional.119=${javaParameter19}
wrapper.java.additional.120=${javaParameter20}
wrapper.java.additional.121=${javaParameter21}
wrapper.java.additional.122=${javaParameter22}
wrapper.java.additional.123=${javaParameter23}
wrapper.java.additional.124=${javaParameter24}

#********************************************************************
#	the following line is not a comment but a directive:
#include ./conf/wrapper.memory.properties

# http://wrapper.tanukisoftware.org/doc/english/prop-java-mainclass.html
#	Java Main class.  This class must implement the WrapperListener interface
# 	or guarantee that the WrapperManager class is initialized.  Helper
#	classes are provided to do this for you.  See the Integration section
#	of the documentation for details.
# 	we are using WrapperSimpleApp as main application
wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp

# http://wrapper.tanukisoftware.org/doc/english/prop-app-parameter-n.html
#	Application parameters.  Add parameters as needed starting from 1
# 	we are using WrapperSimpleApp as main application which, in trun,
#	takes our main class name as parameter #1,
wrapper.app.parameter.1=${mainClass}
#	which in turn, takes all of the following parameters as its own
wrapper.app.parameter.100=${mainParameter0}
wrapper.app.parameter.101=${mainParameter1}
wrapper.app.parameter.102=${mainParameter2}
wrapper.app.parameter.103=${mainParameter3}
wrapper.app.parameter.104=${mainParameter4}
wrapper.app.parameter.105=${mainParameter5}
wrapper.app.parameter.106=${mainParameter6}
wrapper.app.parameter.107=${mainParameter7}
wrapper.app.parameter.108=${mainParameter8}
wrapper.app.parameter.109=${mainParameter9}
wrapper.app.parameter.110=${mainParameter10}
wrapper.app.parameter.111=${mainParameter11}
wrapper.app.parameter.112=${mainParameter12}
wrapper.app.parameter.113=${mainParameter13}
wrapper.app.parameter.114=${mainParameter14}
wrapper.app.parameter.115=${mainParameter15}
wrapper.app.parameter.116=${mainParameter16}
wrapper.app.parameter.117=${mainParameter17}
wrapper.app.parameter.118=${mainParameter18}
wrapper.app.parameter.119=${mainParameter19}
wrapper.app.parameter.120=${mainParameter20}
wrapper.app.parameter.121=${mainParameter21}
wrapper.app.parameter.122=${mainParameter22}
wrapper.app.parameter.123=${mainParameter23}
wrapper.app.parameter.124=${mainParameter24}

#********************************************************************
# Wrapper Logging Properties
#********************************************************************

# http://wrapper.tanukisoftware.org/doc/english/prop-console-format.html
#	Format of output for the console.  (See docs for formats)
wrapper.console.format=LPTM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# http://wrapper.tanukisoftware.org/doc/english/prop-logfile-rollmode.html
#	DATE - As each log entry is logged to a file, its timestamp is compared with a YYYYMMDD formatted token in the current log file. Whenever this date changes a new log file will be opened. This has the benefit of grouping all log entries for a given day in a specific file. A file will not be created on days which do not have any log output.
wrapper.logfile.rollmode=DATE

# http://wrapper.tanukisoftware.org/doc/english/prop-logfile.html
# 	Log file to use for wrapper output logging.
wrapper.logfile=./logs/wrapper.YYYYMMDD.log

# http://wrapper.tanukisoftware.org/doc/english/prop-logfile-format.html
#	Format of output for the log file.
wrapper.logfile.format=LPTM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=10m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=3

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper Windows Properties
#********************************************************************
# Title to use when running as a console
wrapper.console.title=${serviceName}

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.
#
# if you need to delete service manually, use this command:
#	sc delete ${serviceName}

# Name of the service
wrapper.ntservice.name=${serviceName}

# Display name of the service
wrapper.ntservice.displayname=${serviceName}

# Description of the service
wrapper.ntservice.description=${project.description}

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START or DEMAND_START
wrapper.ntservice.starttype=AUTO_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false

# http://wrapper.tanukisoftware.org/doc/english/prop-ntservice-password.html
# 	store account separately, so it can be replaced/removed by installer;
#	the following line is not a comment but a directive:
#include ./conf/wrapper.account.properties


##########################################
# use for debugging:
#	memory and cpu profiling; (seconds)
#
#	wrapper.debug=true
#	wrapper.memory_output=true
#	wrapper.memory_output.interval=1
#	wrapper.cpu_output=true
#	wrapper.cpu_output.interval=1
##########################################

